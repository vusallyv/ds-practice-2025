version: '3'
services:
  frontend:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 80 of the container to port 8080 on the host
      # Access the application at http://localhost:8080
      - "8080:80"
    volumes:
      # Mount the frontend directory
      - ./frontend/src:/usr/share/nginx/html
  orchestrator:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app.py
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Gives access to the Docker API
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the orchestrator/src directory in the current directory to the /app/orchestrator/src directory in the container
      - ./orchestrator/src:/app/orchestrator/src
  fraud_detection:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./fraud_detection/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50051:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/fraud_detection/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./fraud_detection/src:/app/fraud_detection/src
  transaction_verification:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the transaction_verification directorys
      dockerfile: ./transaction_verification/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50052 on the host
      - 50052:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/transaction_verification/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./transaction_verification/src:/app/transaction_verification/src
  suggestions:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the transaction_verification directorys
      dockerfile: ./suggestions/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50053 on the host
      - 50053:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/suggestions/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./suggestions/src:/app/suggestions/src
  order_queue:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the transaction_verification directorys
      dockerfile: ./order_queue/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50054 on the host
      - 50054:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/order_queue/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./order_queue/src:/app/order_queue/src
  order_executor:
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Gives access to the Docker API
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src
    deploy:
      replicas: 3  # Run 3 replicas
    expose:
      # Expose port 50051 on the container
      - 50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
  books_database_primary:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the books executor directorys
      dockerfile: ./books_database/Dockerfile
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Gives access to the Docker API
      - ./utils:/app/utils
      - ./books_database/src:/app/books_database/src
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50056 on the host
      - 50056:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      - IS_PRIMARY=TRUE
  books_database:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the books executor directorys
      dockerfile: ./books_database/Dockerfile
    volumes:
      - ./utils:/app/utils
      - ./books_database/src:/app/books_database/src
    deploy:
      replicas: 3  # Run 3 replicas
    expose:
      # Expose port 50051 on the container
      - 50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
  payment:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the transaction_verification directorys
      dockerfile: ./payment/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50055 on the host
      - 50055:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/payment/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./payment/src:/app/payment/src

networks:
  order_network:
    driver: bridge
