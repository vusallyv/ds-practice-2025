# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from utils.pb.order_executor import order_executor_pb2 as utils_dot_pb_dot_order__executor_dot_order__executor__pb2


class OrderExecutorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.unary_unary(
                '/OrderExecutor/Start',
                request_serializer=utils_dot_pb_dot_order__executor_dot_order__executor__pb2.ExecutorStartRequest.SerializeToString,
                response_deserializer=utils_dot_pb_dot_order__executor_dot_order__executor__pb2.ExecutorStartResponse.FromString,
                )


class OrderExecutorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderExecutorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=utils_dot_pb_dot_order__executor_dot_order__executor__pb2.ExecutorStartRequest.FromString,
                    response_serializer=utils_dot_pb_dot_order__executor_dot_order__executor__pb2.ExecutorStartResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OrderExecutor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrderExecutor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OrderExecutor/Start',
            utils_dot_pb_dot_order__executor_dot_order__executor__pb2.ExecutorStartRequest.SerializeToString,
            utils_dot_pb_dot_order__executor_dot_order__executor__pb2.ExecutorStartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
